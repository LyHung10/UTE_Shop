import { ChatSession, ChatMessage, User } from '../models/index.js';
import { Op } from 'sequelize';
import { v4 as uuidv4 } from 'uuid';

class ChatService {
    // T·∫°o session m·ªõi ho·∫∑c l·∫•y session hi·ªán t·∫°i
    async createOrGetSession(userId = null, guestInfo = null) {
        let session;
        
        if (userId) {
            // T√¨m session active c·ªßa user
            session = await ChatSession.findOne({
                where: { 
                    user_id: userId, 
                    status: ['active', 'waiting'] 
                },
                include: [{
                    model: ChatMessage,
                    as: 'messages',
                    limit: 50,
                    order: [['created_at', 'DESC']]
                }]
            });
        }
        
        if (!session) {
            const sessionId = `chat_${uuidv4()}`;
            session = await ChatSession.create({
                session_id: sessionId,
                user_id: userId,
                guest_info: guestInfo,
                status: 'active'
            });
        }
        
        return session;
    }
    
    // G·ª≠i tin nh·∫Øn
    async sendMessage({ sessionId, userId = null, message, senderType = 'user', messageType = 'text', metadata = null }) {
        const chatMessage = await ChatMessage.create({
            user_id: userId,
            session_id: sessionId,
            message,
            sender_type: senderType,
            message_type: messageType,
            metadata
        });
        
        // C·∫≠p nh·∫≠t last_message_at c·ªßa session
        await ChatSession.update(
            { last_message_at: new Date() },
            { where: { session_id: sessionId } }
        );
        
        // Load message v·ªõi th√¥ng tin user
        const messageWithUser = await ChatMessage.findByPk(chatMessage.id, {
            include: [{
                model: User,
                as: 'user',
                attributes: ['id', 'first_name', 'last_name', 'image']
            }]
        });
        
        return messageWithUser;
    }
    
    // L·∫•y tin nh·∫Øn theo session
    async getMessages(sessionId, page = 1, limit = 50) {
        const offset = (page - 1) * limit;
        
        const messages = await ChatMessage.findAll({
            where: { session_id: sessionId },
            include: [{
                model: User,
                as: 'user',
                attributes: ['id', 'first_name', 'last_name', 'image']
            }],
            order: [['created_at', 'ASC']],
            limit,
            offset
        });
        
        return messages;
    }
    
    // L·∫•y danh s√°ch sessions (cho admin)
    async getSessions({ status = null, page = 1, limit = 20, assignedTo = null }) {
        const where = {};
        if (status) where.status = status;
        if (assignedTo) where.assigned_to = assignedTo;
        
        const offset = (page - 1) * limit;
        
        const { rows, count } = await ChatSession.findAndCountAll({
            where,
            include: [
                {
                    model: User,
                    as: 'user',
                    attributes: ['id', 'first_name', 'last_name', 'image'],
                    required: false
                },
                {
                    model: ChatMessage,
                    as: 'messages',
                    limit: 1,
                    order: [['created_at', 'DESC']],
                    separate: true // Important for proper ordering
                }
            ],
            order: [['last_message_at', 'DESC']],
            limit,
            offset
        });
        
        return { sessions: rows, total: count };
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i session
    async updateSessionStatus(sessionId, status, assignedTo = null) {
        const updateData = { status };
        if (assignedTo) updateData.assigned_to = assignedTo;
        
        await ChatSession.update(updateData, {
            where: { session_id: sessionId }
        });
        
        return await ChatSession.findOne({
            where: { session_id: sessionId },
            include: [
                {
                    model: User,
                    as: 'user',
                    attributes: ['id', 'first_name', 'last_name', 'image'],
                    required: false
                }
            ]
        });
    }

    // Get stats for admin dashboard
    async getStats() {
        const [total, active, waiting, closed] = await Promise.all([
            ChatSession.count(),
            ChatSession.count({ where: { status: 'active' } }),
            ChatSession.count({ where: { status: 'waiting' } }),
            ChatSession.count({ where: { status: 'closed' } })
        ]);

        return { total, active, waiting, closed };
    }
    
    // Bot responses logic v·ªõi context UTE Shop
    // getBotResponse(userMessage) {
    //     const message = userMessage.toLowerCase();
        
    //     // UTE Shop specific responses
    //     if (message.includes('ute') || message.includes('tr∆∞·ªùng') || message.includes('sinh vi√™n')) {
    //         return [{
    //             message: "üéì Ch√†o m·ª´ng sinh vi√™n UTE! T√¥i l√† tr·ª£ l√Ω h·ªó tr·ª£ chuy√™n bi·ªát cho sinh vi√™n ƒê·∫°i h·ªçc S∆∞ ph·∫°m K·ªπ thu·∫≠t TP.HCM. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ c√°c s·∫£n ph·∫©m d√†nh ri√™ng cho sinh vi√™n v·ªõi gi√° ∆∞u ƒë√£i ƒë·∫∑c bi·ªát!",
    //             type: 'quick_reply',
    //             metadata: {
    //                 quick_replies: [
    //                     { title: "∆Øu ƒë√£i sinh vi√™n", payload: "student_discount" },
    //                     { title: "S·∫£n ph·∫©m h·ªçc t·∫≠p", payload: "study_products" },
    //                     { title: "Th·ªùi trang sinh vi√™n", payload: "student_fashion" }
    //                 ]
    //             }
    //         }];
    //     }

    //     // Pricing questions
    //     if (message.includes('gi√°') || message.includes('price') || message.includes('bao nhi√™u')) {
    //         return [{
    //             message: "üí∞ Th√¥ng tin gi√° s·∫£n ph·∫©m UTE Shop:\n- Gi√° ƒë√£ bao g·ªìm VAT\n- Sinh vi√™n UTE ƒë∆∞·ª£c gi·∫£m 25% ƒë∆°n h√†ng ƒë·∫ßu ti√™n\n- Mi·ªÖn ph√≠ ship ƒë∆°n t·ª´ 500k\n- Thanh to√°n COD ho·∫∑c chuy·ªÉn kho·∫£n",
    //             type: 'text'
    //         }];
    //     }
        
    //     // Shipping information
    //     if (message.includes('ship') || message.includes('giao h√†ng') || message.includes('v·∫≠n chuy·ªÉn')) {
    //         return [{
    //             message: "üöö Th√¥ng tin v·∫≠n chuy·ªÉn UTE Shop:\n- N·ªôi th√†nh HCM: 1-2 ng√†y\n- C√°c t·ªânh kh√°c: 3-5 ng√†y\n- Giao h√†ng t·∫≠n tay t·∫°i KTX UTE\n- Mi·ªÖn ph√≠ ship ƒë∆°n t·ª´ 500k\n- COD to√†n qu·ªëc",
    //             type: 'text'
    //         }];
    //     }
        
    //     // Return/exchange policy
    //     if (message.includes('tr·∫£ h√†ng') || message.includes('ƒë·ªïi') || message.includes('return')) {
    //         return [{
    //             message: "üì¶ Ch√≠nh s√°ch ƒë·ªïi tr·∫£ UTE Shop:\n- 7 ng√†y ƒë·ªïi tr·∫£ mi·ªÖn ph√≠\n- S·∫£n ph·∫©m c√≤n nguy√™n tem m√°c\n- H·ªó tr·ª£ ƒë·ªïi size, m√†u s·∫Øc\n- Chi ph√≠ ship ƒë·ªïi tr·∫£: 30k\n- ƒê·∫∑c bi·ªát: Mi·ªÖn ph√≠ ƒë·ªïi tr·∫£ cho sinh vi√™n UTE",
    //             type: 'text'
    //         }];
    //     }
        
    //     // Payment methods
    //     if (message.includes('thanh to√°n') || message.includes('payment')) {
    //         return [{
    //             message: "üí≥ C√°c ph∆∞∆°ng th·ª©c thanh to√°n:\n- COD (thanh to√°n khi nh·∫≠n h√†ng)\n- VNPay (ATM/Internet Banking)\n- Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n- Thanh to√°n t·∫°i c·ª≠a h√†ng (g·∫ßn UTE)\n- Tr·∫£ g√≥p qua th·∫ª t√≠n d·ª•ng",
    //             type: 'text'
    //         }];
    //     }
        
    //     // Size guide
    //     if (message.includes('size') || message.includes('k√≠ch th∆∞·ªõc') || message.includes('c·ª°')) {
    //         return [{
    //             message: "üìè H∆∞·ªõng d·∫´n ch·ªçn size UTE Shop:\n- Xem b·∫£ng size chi ti·∫øt t·∫°i m·ªói s·∫£n ph·∫©m\n- T∆∞ v·∫•n size mi·ªÖn ph√≠ qua chat\n- ƒê·ªïi size mi·ªÖn ph√≠ trong 7 ng√†y\n- Size chart chu·∫©n ch√¢u √Å",
    //             type: 'text'
    //         }, {
    //             message: "B·∫°n c·∫ßn t∆∞ v·∫•n size cho s·∫£n ph·∫©m n√†o?",
    //             type: 'quick_reply',
    //             metadata: {
    //                 quick_replies: [
    //                     { title: "√Åo thun", payload: "tshirt_size" },
    //                     { title: "Qu·∫ßn jeans", payload: "jeans_size" },
    //                     { title: "Gi√†y d√©p", payload: "shoes_size" },
    //                     { title: "√Åo kho√°c", payload: "jacket_size" }
    //                 ]
    //             }
    //         }];
    //     }
        
    //     // Greeting responses
    //     if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi') || message.includes('ch√†o')) {
    //         return [{
    //             message: "Xin ch√†o! üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi UTE Shop - c·ª≠a h√†ng th·ªùi trang d√†nh ri√™ng cho sinh vi√™n UTE! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n h√¥m nay?",
    //             type: 'quick_reply',
    //             metadata: {
    //                 quick_replies: [
    //                     { title: "∆Øu ƒë√£i sinh vi√™n", payload: "student_offers" },
    //                     { title: "S·∫£n ph·∫©m m·ªõi", payload: "new_products" },
    //                     { title: "Th√¥ng tin ship", payload: "shipping_info" },
    //                     { title: "Ch√≠nh s√°ch ƒë·ªïi tr·∫£", payload: "return_policy" }
    //                 ]
    //             }
    //         }];
    //     }

    //     // Product questions
    //     if (message.includes('s·∫£n ph·∫©m') || message.includes('h√†ng')) {
    //         return [{
    //             message: "üõçÔ∏è UTE Shop chuy√™n cung c·∫•p:\n- Th·ªùi trang sinh vi√™n: √°o thun, hoodie, qu·∫ßn jeans\n- Ph·ª• ki·ªán h·ªçc t·∫≠p: t√∫i x√°ch, balo, c·∫∑p laptop\n- ƒê·ªì l∆∞u ni·ªám UTE: √°o k·ª∑ ni·ªám, c·ªëc, m√≥c kh√≥a\n- ƒê·ªì th·ªÉ thao: gi√†y sneaker, √°o th·ªÉ thao\n\nT·∫•t c·∫£ ƒë·ªÅu c√≥ gi√° ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho sinh vi√™n!",
    //             type: 'quick_reply',
    //             metadata: {
    //                 quick_replies: [
    //                     { title: "Xem √°o thun", payload: "view_tshirts" },
    //                     { title: "Xem balo", payload: "view_backpacks" },
    //                     { title: "ƒê·ªì k·ª∑ ni·ªám UTE", payload: "ute_merchandise" }
    //                 ]
    //             }
    //         }];
    //     }
        
    //     // Default response with UTE context
    //     return [{
    //         message: "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá UTE Shop! üéì T√¥i ƒë√£ ghi nh·∫≠n c√¢u h·ªèi c·ªßa b·∫°n. Nh√¢n vi√™n t∆∞ v·∫•n s·∫Ω ph·∫£n h·ªìi trong v√†i ph√∫t n·ªØa. Trong l√∫c ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ xem c√°c th√¥ng tin h·ªØu √≠ch b√™n d∆∞·ªõi:",
    //         type: 'quick_reply',
    //         metadata: {
    //             quick_replies: [
    //                 { title: "∆Øu ƒë√£i 25% sinh vi√™n", payload: "student_discount" },
    //                 { title: "Th√¥ng tin ship", payload: "shipping" },
    //                 { title: "Ch√≠nh s√°ch ƒë·ªïi tr·∫£", payload: "return_policy" },
    //                 { title: "Li√™n h·ªá admin", payload: "contact_admin" }
    //             ]
    //         }
    //     }];
    // }
    
    // ƒê√°nh gi√° cu·ªëi chat
    async rateSatisfaction(sessionId, rating) {
        await ChatSession.update(
            { customer_satisfaction: rating },
            { where: { session_id: sessionId } }
        );
    }
}

export default new ChatService();