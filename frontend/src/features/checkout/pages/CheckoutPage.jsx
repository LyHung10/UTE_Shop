import React, { useState, useEffect } from "react";
import { 
    FaMoneyBillWave, 
    FaShieldAlt,
    FaCreditCard,
    FaMobileAlt
} from "react-icons/fa";
import { 
    RiSecurePaymentLine
} from "react-icons/ri";
import { 
    ImSpinner8 
} from "react-icons/im";
import { 
    checkoutCOD, 
    checkoutVnpay, 
    fetchCart 
} from "@/redux/action/cartAction.jsx";
import { useNavigate, useLocation } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { toast } from "react-toastify";

const PaymentMethodPage = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const location = useLocation();
    
    const cart = useSelector(state => state.cart);

    const [selectedMethod, setSelectedMethod] = useState("");
    const [isProcessing, setIsProcessing] = useState(false);

    const paymentMethods = [
        {
            id: "vnpay",
            name: "VNPAY QR",
            icon: <RiSecurePaymentLine className="w-8 h-8 text-blue-500" />,
            description: "Qu√©t m√£ QR qua ·ª©ng d·ª•ng ng√¢n h√†ng",
            badge: "ƒê·ªÅ xu·∫•t",
            features: ["H·ªó tr·ª£ 40+ ng√¢n h√†ng", "Giao d·ªãch an to√†n", "X·ª≠ l√Ω ngay l·∫≠p t·ª©c"],
            available: true
        },
        {
            id: "cod",
            name: "Thanh to√°n khi nh·∫≠n h√†ng",
            icon: <FaMoneyBillWave className="w-8 h-8 text-green-500" />,
            description: "Ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n",
            badge: "Ti·ªán l·ª£i",
            features: ["Kh√¥ng c·∫ßn thanh to√°n tr∆∞·ªõc", "Ki·ªÉm tra h√†ng tr∆∞·ªõc", "An t√¢m mua s·∫Øm"],
            available: true
        },
        {
            id: "momo",
            name: "V√≠ MoMo",
            icon: <FaMobileAlt className="w-8 h-8 text-gray-400" />,
            description: "Thanh to√°n nhanh ch√≥ng qua v√≠ ƒëi·ªán t·ª≠ MoMo",
            badge: "S·∫Øp ra m·∫Øt",
            features: ["X√°c th·ª±c nhanh", "B·∫£o m·∫≠t cao", "Khuy·∫øn m√£i"],
            available: false
        },
        {
            id: "card",
            name: "Th·∫ª Visa/Mastercard",
            icon: <FaCreditCard className="w-8 h-8 text-gray-400" />,
            description: "Thanh to√°n qu·ªëc t·∫ø v·ªõi th·∫ª t√≠n d·ª•ng/ghi n·ª£",
            badge: "S·∫Øp ra m·∫Øt",
            features: ["Ch·∫•p nh·∫≠n th·∫ª qu·ªëc t·∫ø", "B·∫£o m·∫≠t 3D Secure", "T·ª∑ gi√° c·∫°nh tranh"],
            available: false
        }
    ];

    const handleMethodSelect = (methodId) => {
        const method = paymentMethods.find(m => m.id === methodId);
        if (!method.available) {
            toast.info("Ph∆∞∆°ng th·ª©c thanh to√°n n√†y s·∫Ω s·ªõm ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
            return;
        }
        setSelectedMethod(methodId);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (!selectedMethod) {
            toast.warning("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n");
            return;
        }

        setIsProcessing(true);

        try {
            const voucher = cart.appliedVoucher;
            const addressId = cart.addressId;
            const shippingFee = cart.shippingFee || 0;

            if (selectedMethod === "cod") {
                const res = await dispatch(checkoutCOD(voucher, addressId, shippingFee));
                if (res.success) {
                    const orderId = res.data?.order?.id;
                    toast.success(`üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: #${orderId}`);
                    dispatch(fetchCart());
                    navigate("/payment/completed", { 
                        state: { 
                            orderId,
                            paymentMethod: "cod"
                        }
                    });
                } else {
                    toast.error(res.message || "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng COD");
                }
            } else if (selectedMethod === "vnpay") {
                const res = await dispatch(checkoutVnpay(voucher, addressId, shippingFee));
                if (res.success) {
                    toast.info("ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn c·ªïng thanh to√°n VNPAY...");
                    setTimeout(() => {
                        window.location.href = res.data?.paymentUrl;
                    }, 1000);
                    dispatch(fetchCart());
                } else {
                    toast.error(res.message || "C√≥ l·ªói x·∫£y ra khi kh·ªüi t·∫°o thanh to√°n VNPAY");
                }
            }
        } catch (err) {
            console.error("Checkout error:", err);
            toast.error("Thanh to√°n th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
        } finally {
            if (selectedMethod !== "vnpay") {
                setTimeout(() => setIsProcessing(false), 2000);
            }
        }
    };

    const handleBackToCart = () => {
        navigate('/cart');
    };

    if (!cart?.items || cart.items.length === 0) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4 flex items-center justify-center">
                <div className="max-w-md w-full text-center">
                    <div className="bg-white rounded-2xl shadow-xl p-8">
                        <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <FaShieldAlt className="w-8 h-8 text-yellow-600" />
                        </div>
                        <h2 className="text-2xl font-bold text-gray-900 mb-4">Gi·ªè h√†ng tr·ªëng</h2>
                        <p className="text-gray-600 mb-6">Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n</p>
                        <button
                            onClick={() => navigate('/')}
                            className="w-full py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg font-semibold hover:from-indigo-700 hover:to-purple-700 transition-all"
                        >
                            Ti·∫øp t·ª•c mua s·∫Øm
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
            <div className="max-w-2xl mx-auto">
                {/* Header */}
                <div className="text-center mb-8">
                    <div className="flex items-center justify-center mb-4">
                        <div className="bg-white p-3 rounded-2xl shadow-lg">
                            <RiSecurePaymentLine className="w-8 h-8 text-indigo-600" />
                        </div>
                    </div>
                    <h1 className="text-3xl font-bold text-gray-900 mb-3">
                        Ch·ªçn Ph∆∞∆°ng Th·ª©c Thanh To√°n
                    </h1>
                    <p className="text-gray-600">
                        Ch·ªçn c√°ch th·ª©c thanh to√°n ph√π h·ª£p cho ƒë∆°n h√†ng c·ªßa b·∫°n
                    </p>
                </div>

                {/* Payment Methods */}
                <div className="bg-white rounded-2xl shadow-xl p-6 mb-6">
                    <div className="flex items-center justify-between mb-6">
                        <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                            <FaShieldAlt className="w-5 h-5 text-green-500 mr-2" />
                            Ph∆∞∆°ng th·ª©c thanh to√°n
                        </h2>
                        <button
                            onClick={handleBackToCart}
                            className="text-sm text-indigo-600 hover:text-indigo-800 font-medium"
                        >
                            ‚Üê Quay l·∫°i gi·ªè h√†ng
                        </button>
                    </div>
                    
                    <div className="space-y-4">
                        {paymentMethods.map((method) => (
                            <div
                                key={method.id}
                                onClick={() => method.available && handleMethodSelect(method.id)}
                                className={`relative p-5 rounded-xl border-2 transition-all duration-300 ${
                                    method.available 
                                        ? selectedMethod === method.id 
                                            ? "border-indigo-500 ring-2 ring-indigo-100 shadow-md cursor-pointer" 
                                            : "border-gray-200 hover:border-indigo-300 hover:shadow-md cursor-pointer"
                                        : "border-gray-100 bg-gray-50 opacity-60 cursor-not-allowed"
                                }`}
                            >
                                <div className="flex items-start justify-between">
                                    <div className="flex items-center">
                                        <div className={method.available ? "" : "opacity-50"}>
                                            {method.icon}
                                        </div>
                                        <div className="ml-4">
                                            <h3 className={`text-lg font-semibold ${
                                                method.available ? "text-gray-900" : "text-gray-500"
                                            }`}>
                                                {method.name}
                                            </h3>
                                            <p className={`text-sm mt-1 ${
                                                method.available ? "text-gray-600" : "text-gray-400"
                                            }`}>
                                                {method.description}
                                            </p>
                                            <div className="flex items-center gap-2 mt-2">
                                                {method.badge && (
                                                    <span className={`inline-block px-2 py-1 text-xs rounded-full ${
                                                        method.badge === "ƒê·ªÅ xu·∫•t" ? "bg-blue-100 text-blue-800" :
                                                        method.badge === "Ti·ªán l·ª£i" ? "bg-green-100 text-green-800" :
                                                        "bg-gray-100 text-gray-800"
                                                    } ${!method.available ? "opacity-50" : ""}`}>
                                                        {method.badge}
                                                    </span>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                    {method.available && selectedMethod === method.id && (
                                        <div className="h-6 w-6 bg-indigo-500 rounded-full flex items-center justify-center">
                                            <svg className="h-3 w-3 text-white" fill="currentColor" viewBox="0 0 12 12">
                                                <path d="M3.707 5.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4a1 1 0 00-1.414-1.414L5 6.586 3.707 5.293z" />
                                            </svg>
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Submit Button */}
                    <button
                        onClick={handleSubmit}
                        disabled={isProcessing || !selectedMethod}
                        className={`w-full mt-6 py-4 px-6 rounded-xl font-semibold text-white transition-all duration-300 ${
                            isProcessing || !selectedMethod
                                ? "bg-gray-400 cursor-not-allowed"
                                : "bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 shadow-lg hover:shadow-xl"
                        }`}
                    >
                        {isProcessing ? (
                            <span className="flex items-center justify-center">
                                <ImSpinner8 className="animate-spin h-5 w-5 mr-3" />
                                ƒêang x·ª≠ l√Ω...
                            </span>
                        ) : (
                            'X√°c nh·∫≠n thanh to√°n'
                        )}
                    </button>
                </div>

                {/* Security Info */}
                <div className="bg-white rounded-2xl shadow-xl p-6 text-center">
                    <div className="flex items-center justify-center mb-4">
                        <FaShieldAlt className="w-5 h-5 text-green-500 mr-2" />
                        <span className="text-sm font-medium text-gray-700">Giao d·ªãch ƒë∆∞·ª£c b·∫£o m·∫≠t v√† m√£ h√≥a</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PaymentMethodPage;